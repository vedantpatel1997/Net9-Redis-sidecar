name: Build and deploy .NET 9 WeatherForecast to Azure Web App
on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  ACR_NAME: libraryacr
  ACR_REPO: net9weatherforecast
  ACR_URL: libraryacr.azurecr.io   # full ACR URL
  WEBAPP_NAME: sidecar-vp
  SLOT_NAME: redisnet9
  USER_MANAGED_IDENTITY_CLIENT_ID: 64eda21d-4f78-4ac5-82a5-5723a461ae29

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to ACR via Azure CLI (SP credentials)
      - name: Log in to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      # Build and push .NET 9 API image with SHA and latest tags
      - name: Build and push .NET 9 API image
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          docker build -t ${{ env.ACR_URL }}/${{ env.ACR_REPO }}:$IMAGE_TAG .
          docker tag ${{ env.ACR_URL }}/${{ env.ACR_REPO }}:$IMAGE_TAG ${{ env.ACR_URL }}/${{ env.ACR_REPO }}:latest
          docker push ${{ env.ACR_URL }}/${{ env.ACR_REPO }}:$IMAGE_TAG
          docker push ${{ env.ACR_URL }}/${{ env.ACR_REPO }}:latest
          echo "NET9_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Push Redis 7.2 image into the same repo with redis7.2 tag
      - name: Push Redis 7.2 image
        run: |
          docker pull redis:7.2
          docker tag redis:7.2 ${{ env.ACR_URL }}/${{ env.ACR_REPO }}:redis7.2
          docker push ${{ env.ACR_URL }}/${{ env.ACR_REPO }}:redis7.2

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: Production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App with SiteContainers
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          slot-name: ${{ env.SLOT_NAME }}
          sitecontainers-config: >-
            [
              {
                "name": "net9weatherforecast",
                "image": "${{ env.ACR_URL }}/${{ env.ACR_REPO }}:${{ env.NET9_IMAGE_TAG }}",
                "targetPort": 8080,
                "isMain": true,
                "authType": "UserAssigned",
                "userManagedIdentityClientId": "${{ env.USER_MANAGED_IDENTITY_CLIENT_ID }}"
              },
              {
                "name": "redis7.2",
                "image": "${{ env.ACR_URL }}/${{ env.ACR_REPO }}:redis7.2",
                "targetPort": 6379,
                "isMain": false,
                "authType": "UserAssigned",
                "userManagedIdentityClientId": "${{ env.USER_MANAGED_IDENTITY_CLIENT_ID }}"
              }
            ]



# Following properties can be set for each container in the sitecontainers-config list.
# SiteContainer 
# {
#     name: string, // mandatory
#     image: string, // mandatory
#     isMain: boolean, // mandatory
#     targetPort?: string,
#     startupCommand?: string,
#     authType?: AUTH_TYPE,
#     userName?: string,
#     passwordSecret?: string,
#     userManagedIdentityClientId?: string,
#     environmentVariables?: EnvironmentVariable[],
#     volumeMounts?: VolumeMount[],
#     inheritAppSettingsAndConnectionStrings?: boolean,
#   }

# AUTH_TYPE is any of the following:
#   Anonymous,
#   UserCredentials,
#   SystemIdentity,
#   UserAssigned

# type EnvironmentVariable {
#   name: string; // mandatory
#   value: string; // mandatory
# }
# type VolumeMount {
#     name: string; // mandatory
#     mountPath: string; // mandatory
#     readOnly?: boolean;
# }